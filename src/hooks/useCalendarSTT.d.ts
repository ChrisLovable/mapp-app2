import type { FormData, EditingFormData } from '../types/calendar';
interface UseCalendarSTTProps {
    formData: FormData;
    setFormData: (data: FormData) => void;
    editingFormData: EditingFormData;
    setEditingFormData: (data: EditingFormData) => void;
    setCurrentDate: (date: Date) => void;
    setShowEventForm: (show: boolean) => void;
    showNotification: (message: string, type: 'success' | 'error' | 'info') => void;
}
export declare const useCalendarSTT: ({ formData, setFormData, editingFormData, setEditingFormData, setCurrentDate, setShowEventForm, showNotification }: UseCalendarSTTProps) => {
    isListening: string | null;
    setIsListening: import("react").Dispatch<import("react").SetStateAction<string | null>>;
    handleTitleSTTResult: (text: string) => void;
    handleAttendeesSTTResult: (text: string) => void;
    handleDescriptionSTTResult: (text: string) => void;
    handleLocationSTTResult: (text: string) => void;
    handleEditDescriptionSTTResult: (text: string) => void;
    handleEditLocationSTTResult: (text: string) => void;
    handleEditAttendeesSTTResult: (text: string) => void;
    handleTitleSTTStart: () => void;
    handleAttendeesSTTStart: () => void;
    handleDescriptionSTTStart: () => void;
    handleLocationSTTStart: () => void;
    handleEditDescriptionSTTStart: () => void;
    handleEditLocationSTTStart: () => void;
    handleEditAttendeesSTTStart: () => void;
    handleDateSTTStart: () => void;
    handleTimeSTTStart: () => void;
    handleDurationSTTStart: () => void;
    handleReminderSTTStart: () => void;
    handleEventTypeSTTStart: () => void;
    handleAllDaySTTStart: () => void;
    handleDateSTTResult: (text: string) => void;
    handleTimeSTTResult: (text: string) => void;
    handleDurationSTTResult: (text: string) => void;
    handleReminderSTTResult: (text: string) => void;
    handleEventTypeSTTResult: (text: string) => void;
    handleAllDaySTTResult: (text: string) => void;
};
export {};
